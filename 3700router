#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math

saved_msg = {}
no_route = {
	"src": "",
        "dst": "",
        "type": "no route",
        "msg": {}}

class Router:

    relations = {}
    sockets = {}
    ports = {}
    routing_table = {"src": "",
                     "dst": "",
                     "type": "table",
                     "msg": []}
    
   
    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))
		

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks: 
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')
                print("Received message '%s' from %s" % (msg, srcif))
                 # code here

                inmsg = json.loads(msg)
                # if this is an update type message
                if inmsg["type"] == "update": 
                    #saved_msg.append(msg)
                    # routing_table[msg].append({"network": ,
                    #                            "netmask":,
                    #                            "peer":
                    #                            "localpref": "pref",
                    #                            "ASPath":,
                    #                            "selfOrigin":,
                    #                            "origin":})
                    self.send("192.168.0.2", json.dumps(inmsg))
                    
                if inmsg["type"] == "withdraw":
                    print("foo")
                if inmsg["type"] == "data":
                    print("foo")
                if inmsg["type"] == "dump":
                    print("foo")
                    #routing_table["dst"] = 
                    #self.send("", json.dumps(routing_table))
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
